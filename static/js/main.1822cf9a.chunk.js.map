{"version":3,"sources":["constants.js","actions.jsx","components/keypad.jsx","components/display.jsx","App.jsx","serviceWorker.js","components/calculate.js","reducers.jsx","index.jsx"],"names":["BS","OPERATORS","OP_END","KEYCODES","Map","SHIFTKEYCODES","opsIds","initState","currNum","formula","display","evaluated","clickDigit","num","type","clickOp","operand","op","equalIt","bsIt","toggleKey","keyId","element","document","getElementById","classList","toggle","setTimeout","digitArr","idArr","DigitKey","props","className","id","tabIndex","value","onClick","clickHandle","OpsKey","ClearKey","BSKey","connect","dispatch","digitClick","event","target","clearClick","bsClick","keyDownHandle","has","keyCode","keyVal","shiftKey","get","preventDefault","includes","indexOf","match","useEffect","addEventListener","removeEventListener","digGrid","map","digObj","i","key","opsGrid","Object","entries","opObj","opsArr","Display","state","App","Boolean","window","location","hostname","OPERATIONS","opFunctions","a","b","mul","div","alert","add","sub","calculate","s","char","calcArr","current","ops","join","length","charAt","endsWith","push","Decimal","j","insert","currentOp","splice","Number","calcReducer","action","newNum","valid","assign","newFormula","replace","slice","evalFormula","result","resultDisplay","toString","store","createStore","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"+OAKMA,EAAK,YAELC,EAAY,UACZC,EAAS,cAETC,EAAW,IAAIC,IAAI,CACrB,CAAC,GAAI,KACL,CAAC,GAAI,KACL,CAAC,GAAI,KACL,CAAC,GAAI,KACL,CAAC,GAAI,KACL,CAAC,GAAI,KACL,CAAC,GAAI,KACL,CAAC,GAAI,KACL,CAAC,IAAK,KACN,CAAC,GAAG,KACJ,CAAC,IAAK,KACN,CAAC,GAAI,KACL,CAAC,IAAK,KACN,CAAC,GAAI,KACL,CAAC,IAAK,KACN,CAAC,GAAI,KACL,CAAC,IAAK,KACN,CAAC,GAAI,KACL,CAAC,IAAK,KACN,CAAC,GAAI,KACL,CAAC,IAAK,KACN,CAAC,IAAK,KACN,CAAC,IAAK,KACN,CAAC,IAAK,KACN,CAAC,IAAK,KACN,CAAC,IAAK,KACN,CAAC,IAAK,KACN,CAAC,IAAK,KACN,CAAC,IAAK,KACN,CAAC,GAAI,SACL,CAAC,EAAG,MACJ,CAAC,GAAI,QAGHC,EAAgB,IAAID,IAAI,CAC1B,CAAC,GAAI,KACL,CAAC,IAAK,OAGJE,EAAO,CACT,IAAI,MACJ,IAAI,MACJ,IAAI,WACJ,IAAI,UAGFC,EAAY,CACdC,QAAS,IACTC,QAAS,GACTC,QAAS,IACTC,WAAW,GC1Df,SAASC,EAAWC,GAChB,MAAM,CACFC,KDDM,QCEND,IAAKA,GAIb,SAASE,EAAQC,GACb,MAAM,CACFF,KDXQ,UCYRG,GAAID,GAIZ,SAASE,EAAQL,GACb,MAAM,CACFC,KDjBO,SCkBPD,IAAKA,GAUb,SAASM,IACL,MAAM,CACFL,KAAMd,GAId,SAASoB,EAAUC,GACf,IAAIC,EAAUC,SAASC,eAAeH,GACtCC,EAAQG,UAAUC,OAAO,cACzBC,YAAW,kBAAIL,EAAQG,UAAUC,OAAO,gBAAe,KClC3D,IAAME,EAAW,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KACnEC,EAAQ,CAAC,OAAQ,QAAS,QAAS,MAAO,OAAQ,OAAQ,QAAS,MAAO,MAAO,OAAQ,UAAW,UAE1G,SAASC,EAASC,GACd,OAAO,4BAAQC,UAAU,MAAMC,GAAIF,EAAME,GAAIC,SAAS,KAAKC,MAAOJ,EAAMI,MAAOC,QAASL,EAAMM,aAAcN,EAAMI,OAGtH,SAASG,EAAOP,GACZ,OAAO,4BAAQjB,KAAK,SAASoB,SAAS,KAAKF,UAAU,MAAMC,GAAI3B,EAAOyB,EAAMI,OAAQC,QAAS,kBAAML,EAAMhB,QAAQgB,EAAMI,SAASJ,EAAMI,OAG1I,SAASI,EAASR,GACd,OAAO,4BAAQC,UAAU,MAAMC,GAAG,QAAQG,QAASL,EAAMM,aAAlD,KAGX,SAASG,EAAMT,GACX,OAAO,4BAAQC,UAAU,MAAMC,GAAG,QAAQG,QAASL,EAAMM,aAAlD,UAGX,IA0EeI,cAAQ,MA1CI,SAAAC,GACvB,MAAM,CACFC,WAAY,SAAAC,GACRxB,EAAUwB,EAAMC,OAAOZ,IACC,MAArBW,EAAMC,OAAOV,MACZO,EAASxB,KAETwB,EAAS9B,EAAWgC,EAAMC,OAAOV,SAGzCpB,QAAS,SAACoB,GAAD,OAAWO,EAAS3B,EAAQoB,KACrCW,WAAY,WAAQJ,ED1ClB,CACF5B,KDvBM,WEiENiC,QAAS,WAAQL,EAASvB,MAC1B6B,cAAe,SAAAJ,GACX,GAAGzC,EAAS8C,IAAIL,EAAMM,SAAS,CAC3B,IAAIC,EAASP,EAAMQ,UAAY/C,EAAc4C,IAAIL,EAAMM,SACnD7C,EAAcgD,IAAIT,EAAMM,SACxB/C,EAASkD,IAAIT,EAAMM,SAEX,UAATC,GAA+B,MAAXA,IACnBP,EAAMU,iBACNlC,EAAU,UACVsB,EAASxB,MAEC,OAAXiC,IACCP,EAAMU,iBACNlC,EAAU,SACVsB,EAASvB,MAEVS,EAAS2B,SAASJ,KACjB/B,EAAUS,EAAMD,EAAS4B,QAAQL,KACjCT,EAAS9B,EAAWuC,KAErBA,EAAOM,MAAMxD,KACZmB,EAAUd,EAAO6C,IACjBT,EAAS3B,EAAQoC,UAOtBV,EA1EA,SAAAV,GACX2B,qBAAU,WAEN,OADAnC,SAASoC,iBAAiB,UAAW5B,EAAMiB,eACpC,kBAAMzB,SAASqC,oBAAoB,UAAW7B,EAAMiB,kBAC5D,CAACjB,EAAMiB,gBAEV,IAAIa,EAAUjC,EAASkC,KAAI,SAACC,EAAQC,EAAGpC,GACnC,OACI,kBAACE,EAAD,CAAUK,MAAOP,EAASoC,GAAI/B,GAAIJ,EAAMmC,GAAI3B,YAAaN,EAAMY,WAAYsB,IAAKD,OAGpFE,EAAUC,OAAOC,QAAQ9D,GAAQwD,KAAI,SAACO,EAAOL,EAAGM,GAChD,OACI,kBAAChC,EAAD,CAAQH,MAAOmC,EAAON,GAAG,GAAI/B,GAAIqC,EAAON,GAAG,GAAIjD,QAASgB,EAAMhB,QAASkD,IAAKK,EAAON,GAAG,QAG9F,OACI,yBAAK/B,GAAG,UACJ,yBAAKA,GAAG,YACH4B,GAEL,yBAAK5B,GAAG,YACHiC,GAEL,yBAAKjC,GAAG,YACJ,kBAACM,EAAD,CAAUF,YAAaN,EAAMe,aAC7B,kBAACN,EAAD,CAAOH,YAAaN,EAAMgB,eC/C1C,SAASwB,EAAQxC,GACb,OACI,yBAAKE,GAAG,mBACJ,yBAAKA,GAAG,WACHF,EAAMtB,SAEX,yBAAKwB,GAAG,WACHF,EAAMrB,UAkBR+B,mBAPf,SAAyB+B,GACrB,MAAO,CACH/D,QAAU+D,EAAM/D,QAChBC,QAAS8D,EAAM9D,WAIR+B,EAXf,SAA0BV,GACtB,OAAO,kBAACwC,EAAD,CAAS7D,QAASqB,EAAMrB,QAASD,QAASsB,EAAMtB,aCJ5CgE,MATf,WACE,OACE,yBAAKzC,UAAU,OACX,kBAAC,EAAD,MACA,kBAAC,EAAD,QCGY0C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASpB,MACvB,2D,2BChBAqB,EAAW,CAAC,IAAK,IAAK,IAAK,KAC3BC,EAAc,CAChB,IAAI,SAACC,EAAGC,GAAO,OAAOD,EAAEE,IAAID,IAC5B,IAAI,SAACD,EAAGC,GAAO,OAAW,IAAJA,EAAQD,EAAEG,IAAIF,GAAKG,MAAM,qBAC/C,IAAI,SAACJ,EAAGC,GAAO,OAAOD,EAAEK,IAAIJ,IAC5B,IAAI,SAACD,EAAGC,GAAO,OAAOD,EAAEM,IAAIL,KAGjB,SAASM,EAAUC,GAK9B,IAHA,IAGeC,EAHXC,EAAQ,GACRC,EAAU,GACVC,EAAId,EAAWe,KAAK,IAChB7B,EAAI,EAASA,EAAIwB,EAAEM,OAAQ9B,IAC/ByB,EAAOD,EAAEO,OAAO/B,GACZ4B,EAAIpC,QAAQiC,IAAS,EACN,KAAZE,GAA2B,MAATF,EACjBE,EAAU,IACPA,EAAQK,SAAS,KAExBL,GAAWF,GAEPC,EAAQO,KAAK,IAAIC,IAAQP,GAAUF,GACnCE,EAAU,IAGdA,EAAmB,MAATF,EAAeE,EAAUA,GAAWF,EAIvC,KAAZE,GACCD,EAAQO,KAAK,IAAIC,IAAQP,IAK7B,IAAI,IAAI3B,EAAI,EAAGA,EAAIc,EAAWgB,OAAQ9B,IAClC,IAAI,IAAImC,EAAI,EAAGA,EAAIT,EAAQI,OAAQK,IAC/B,GAAGT,EAAQS,KAAOrB,EAAWd,GAAG,CAG5B,IAAIoC,GADJC,EAAYtB,EAAYD,EAAWd,KACZ0B,EAAQS,EAAE,GAAIT,EAAQS,EAAE,IAC/CT,EAAQY,OAAOH,EAAE,EAAG,EAAGC,GACvBD,EAAIA,EAAI,EAAIA,EAAI,EAAI,EAMhC,OAAOT,EAAQI,OAAS,EAAI,MAAQS,OAAOb,EAAQ,ICwDxCc,MAtGf,WAAgD,IAA3BhC,EAA0B,uDAAlBjE,EAAWkG,EAAO,uCAC3C,OAAOA,EAAO3F,MACV,IPHM,QOIF,IAAI4F,EAASlC,EAAMhE,QACnB,GAAGkG,EAAOZ,OAAS,GAChB,OAAOtB,EAEV,IAAImC,GAAQ,EAMZ,GAJkB,MAAfF,EAAO5F,MACN8F,EAAsB,MAAdD,EAAO,IAGD,MAAfD,EAAO5F,IAAY,CACnB,GAAc,KAAX6F,EACC,OAAOvC,OAAOyC,OAAO,GAAIpC,EAAO,CAAChE,QAAQ,KAAME,QAAQ,OAEtDiG,GAASnC,EAAMhE,QAAQ+C,SAAS,KAUxC,GANGkD,EAAO5F,IAAI4C,MAAM,WAEhBiD,EAAoB,MAAXA,EAAiB,GAAKA,EAC/BC,GAAQ,GAGTA,EAAM,CACLD,EAASlC,EAAM7D,UAAY8F,EAAO5F,IAAM6F,EAASD,EAAO5F,IACxD,IAAIgG,EAAarC,EAAM7D,UAAY,GAAK6D,EAAM/D,QAC9C,OAAO0D,OAAOyC,OAAO,GAAIpC,EAAO,CAAChE,QAASkG,EAAQhG,QAASgG,EAAQjG,QAASoG,EAAYlG,WAAW,IAEnG,OAAO6D,EAGf,IPvCQ,UOwCJ,IAAIhE,EAAUgE,EAAMhE,QAChBC,EAA6B,KAAlB+D,EAAM/D,SAA8B,KAAZD,EAAkB,IAAKgE,EAAM/D,QAIpE,IAHuB,IAApB+D,EAAM7D,YACLF,EAAU,IAEG,MAAdgG,EAAOxF,IAA0B,KAAZT,EACpB,OAAO2D,OAAOyC,OAAO,GAAIpC,EAAO,CAAChE,QAAS,IAAKE,QAAS,IAAKC,WAAW,IAG5E,GAAgB,KAAZH,GAA8B,MAAZA,EAElB,OADAC,EAAUA,EAAUD,EAAU,IAAMiG,EAAOxF,GAAK,IACzCkD,OAAOyC,OAAO,GAAIpC,EAAO,CAAE/D,QAASA,EAASD,QAAQ,GAAIE,QAAQ,GAAIC,WAAW,IAEvF,IAAIkG,EAAapG,EAAQqG,QAAQ5G,EAAQuG,EAAOxF,GAAK,KACrD,OAAOkD,OAAOyC,OAAO,GAAIpC,EAAO,CAAE/D,QAASoG,EAAYrG,QAAQ,GAAIG,WAAW,IAEtF,KAAKX,EACD,IAAuB,IAApBwE,EAAM7D,UAEL,OADAS,EAAU,SACHb,EAEX,GAAGiE,EAAMhE,QAAQsF,OAAS,EAAE,CACxB,IAAIY,EAASlC,EAAMhE,QAAQuG,MAAM,GAAI,GACrC,OAAO5C,OAAOyC,OAAO,GAAIpC,EAAO,CAAChE,QAASkG,EAAQhG,QAASgG,IAE/D,GAA4B,IAAzBlC,EAAMhE,QAAQsF,OACb,OAAO3B,OAAOyC,OAAO,GAAIpC,EAAO,CAAC9D,QAAQ,GAAIF,QAAQ,KAEzD,GAAGgE,EAAM/D,QAAQqF,OAAS,GAA8B,IAAzBtB,EAAMhE,QAAQsF,OAAa,CACtD,IAAIe,EAAarC,EAAM/D,QACvB,GAAIoG,EAAWpD,MAAMvD,IAAW2G,EAAWb,SAAS,KACjD,GACKa,EAAaA,EAAWE,MAAM,GAAI,SAC9BF,EAAWpD,MAAMvD,IAAW2G,EAAWb,SAAS,WACtDa,EAAarC,EAAM/D,QAAQsG,MAAM,GAAG,GAC1C,OAAO5C,OAAOyC,OAAO,GAAIpC,EAAO,CAAC/D,QAASoG,IACxC,OAAOrC,EAEjB,IP5EM,QO6EF,OAAOL,OAAOyC,OAAO,GAAIpC,EAAO,CAAChE,QAAQ,GAAIC,QAAQ,GAAIC,QAAQ,IAAKC,WAAW,IAErF,IPhFO,SOiFH,IAAuB,IAApB6D,EAAM7D,UACL,OAAO6D,EAIX,IAFA,IAAIwC,EAAcxC,EAAM/D,QAAU+D,EAAMhE,QAEjCwG,EAAYvD,MAAMvD,IACrB8G,EAAcA,EAAYD,MAAM,GAAI,GAExC,IAAIE,EAAS,EAIb,GAHGD,EAAYlB,OAAS,IACpBmB,EAAS1B,EAAUyB,IAET,QAAXC,EAEC,OADAtF,YAAW,kBAAIyD,MAAM,iCAAgC,MAC9CZ,EAEX,IAAI0C,EAAgBF,EAAc,MAAQC,EAAOE,WACjD,OAAOhD,OAAOyC,OAAO,GAAIpC,EAAO,CAAC9D,QAASuG,EAAQzG,QAASyG,EAAOE,WAAY1G,QAASyG,EAAevG,WAAW,IAErH,QACI,OAAO6D,IC9Fb4C,EAAQC,YAAYb,GAC1Bc,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,CAAUJ,MAASA,GACjB,kBAAC,EAAD,QAGJ7F,SAASC,eAAe,SHmHpB,kBAAmBiG,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.1822cf9a.chunk.js","sourcesContent":["//Constants for declaration throughout JSCalc App\r\nconst OPERAND = 'OPERAND';\r\nconst EQUALS = 'EQUALS';\r\nconst CLEAR = 'CLEAR';\r\nconst DIGIT = 'DIGIT';\r\nconst BS = 'BACKSPACE';\r\n\r\nconst OPERATORS = /[+\\-*/]/\r\nconst OP_END = /[+\\-*/]\\s?$/\r\nconst OP_START = /^[+\\-*]/\r\nconst KEYCODES = new Map([\r\n    [96, '0'],\r\n    [48, '0'],\r\n    [97, '1'],\r\n    [49, '1'],\r\n    [98, '2'],\r\n    [50, '2'],\r\n    [99, '3'],\r\n    [51, '3'],\r\n    [100, '4'],\r\n    [52,'4'],\r\n    [101, '5'],\r\n    [53, '5'],\r\n    [102, '6'],\r\n    [54, '6'],\r\n    [103, '7'],\r\n    [55, '7'],\r\n    [104, '8'],\r\n    [56, '8'],\r\n    [105, '9'],\r\n    [57, '9'],\r\n    [190, '.'],\r\n    [110, '.'],\r\n    [187, '='],\r\n    [107, '+'],\r\n    [189, '-'],\r\n    [109, '-'],\r\n    [106, '*'],\r\n    [191, '/'],\r\n    [111, '/'],\r\n    [13, 'enter'],\r\n    [8, 'bs'],\r\n    [46, 'bs']\r\n])\r\n\r\nconst SHIFTKEYCODES = new Map([\r\n    [56, '*'],\r\n    [187, '+']\r\n])\r\n\r\nconst opsIds={\r\n    '+':'add',\r\n    '-':'sub',\r\n    '*':'multiply',\r\n    '/':'divide'\r\n}\r\n\r\nconst initState = {\r\n    currNum: '0',\r\n    formula: '',\r\n    display: '0',\r\n    evaluated: false\r\n}\r\n\r\nexport {DIGIT, OPERAND, OPERATORS, OP_END, OP_START, EQUALS, CLEAR, KEYCODES, SHIFTKEYCODES, BS, initState, opsIds}","//Action creators for react/redux - JS Calc App\r\nimport { OPERAND, EQUALS, CLEAR, DIGIT, BS, } from './constants'\r\n\r\nfunction clickDigit(num){\r\n    return{\r\n        type: DIGIT,\r\n        num: num\r\n    }\r\n}\r\n\r\nfunction clickOp(operand){\r\n    return{\r\n        type: OPERAND,\r\n        op: operand\r\n    }\r\n}\r\n\r\nfunction equalIt(num){\r\n    return{\r\n        type: EQUALS,\r\n        num: num\r\n    }\r\n}\r\n\r\nfunction clearIt(){\r\n    return{\r\n        type: CLEAR\r\n    }\r\n}\r\n\r\nfunction bsIt(){\r\n    return{\r\n        type: BS\r\n    }\r\n}\r\n\r\nfunction toggleKey(keyId){\r\n    let element = document.getElementById(keyId)\r\n    element.classList.toggle('key-active')\r\n    setTimeout(()=>element.classList.toggle('key-active'), 150)\r\n}\r\nexport { clickOp, equalIt, clearIt, clickDigit, bsIt, toggleKey}","import React, { useEffect } from 'react'\r\nimport {connect} from 'react-redux'\r\nimport {clickDigit, equalIt, clickOp, toggleKey, clearIt, bsIt} from '../actions'\r\nimport {OPERATORS, KEYCODES, SHIFTKEYCODES, opsIds} from '../constants'\r\n\r\nconst digitArr = ['9', '8', '7', '6', '5', '4', '3', '2', '1', '0', '.', '='];\r\nconst idArr = ['nine', 'eight', 'seven', 'six', 'five', 'four', 'three', 'two', 'one', 'zero', 'decimal', 'equals'];\r\n\r\nfunction DigitKey(props){\r\n    return <button className='key' id={props.id} tabIndex='-1' value={props.value} onClick={props.clickHandle}>{props.value}</button>\r\n}\r\n\r\nfunction OpsKey(props){\r\n    return <button type='button' tabIndex='-1' className='key' id={opsIds[props.value]} onClick={() => props.clickOp(props.value)}>{props.value}</button>\r\n}\r\n\r\nfunction ClearKey(props){\r\n    return <button className='key' id='clear' onClick={props.clickHandle}>C</button>\r\n}\r\n\r\nfunction BSKey(props){\r\n    return <button className='key' id='bskey' onClick={props.clickHandle}>&#9003;</button>\r\n}\r\n\r\nconst Keypad = props => {\r\n    useEffect(() => {\r\n        document.addEventListener('keydown', props.keyDownHandle)\r\n        return(() => document.removeEventListener('keydown', props.keyDownHandle))\r\n    }, [props.keyDownHandle] )\r\n    \r\n    let digGrid = digitArr.map((digObj, i, digitArr)=>{\r\n        return(\r\n            <DigitKey value={digitArr[i]} id={idArr[i]} clickHandle={props.digitClick} key={i} />\r\n        )\r\n    })\r\n    let opsGrid = Object.entries(opsIds).map((opObj, i, opsArr) => {\r\n        return(\r\n            <OpsKey value={opsArr[i][0]} id={opsArr[i][1]} clickOp={props.clickOp} key={opsArr[i][1]} />\r\n        ) \r\n    })\r\n    return(\r\n        <div id='keypad'>\r\n            <div id='dig-grid'>\r\n                {digGrid}\r\n            </div>\r\n            <div id='ops-keys'>\r\n                {opsGrid}\r\n            </div>\r\n            <div id='clear-bs'>\r\n                <ClearKey clickHandle={props.clearClick} />\r\n                <BSKey clickHandle={props.bsClick} />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return{\r\n        digitClick: event => {\r\n            toggleKey(event.target.id)\r\n            if(event.target.value==='='){\r\n                dispatch(equalIt())\r\n            }else{\r\n                dispatch(clickDigit(event.target.value))\r\n            }\r\n        },\r\n        clickOp: (value) => dispatch(clickOp(value)),\r\n        clearClick: () => { dispatch(clearIt()) },\r\n        bsClick: () => { dispatch(bsIt()) },\r\n        keyDownHandle: event => {\r\n            if(KEYCODES.has(event.keyCode)){\r\n                let keyVal = event.shiftKey && SHIFTKEYCODES.has(event.keyCode) ? \r\n                    SHIFTKEYCODES.get(event.keyCode) :\r\n                    KEYCODES.get(event.keyCode);\r\n                    \r\n                if(keyVal==='enter' || keyVal === '='){\r\n                    event.preventDefault()\r\n                    toggleKey('equals')\r\n                    dispatch(equalIt())\r\n                }\r\n                if(keyVal === 'bs'){\r\n                    event.preventDefault()\r\n                    toggleKey('bskey')\r\n                    dispatch(bsIt())\r\n                }\r\n                if(digitArr.includes(keyVal)){\r\n                    toggleKey(idArr[digitArr.indexOf(keyVal)])\r\n                    dispatch(clickDigit(keyVal))\r\n                }\r\n                if(keyVal.match(OPERATORS)){\r\n                    toggleKey(opsIds[keyVal])\r\n                    dispatch(clickOp(keyVal))\r\n                } \r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport default connect(null, mapDispatchToProps)(Keypad);","import React from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nfunction Display(props){\r\n    return(\r\n        <div id='display-wrapper'>\r\n            <div id='history'>\r\n                {props.formula}\r\n            </div>\r\n            <div id='display'>\r\n                {props.display}\r\n            </div>\r\n        </div>\r\n        \r\n    )\r\n}\r\n\r\nfunction DisplayContainer(props){\r\n    return <Display display={props.display} formula={props.formula}/>\r\n}\r\n\r\nfunction mapStateToProps(state){\r\n    return {\r\n        formula : state.formula,\r\n        display: state.display\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps)(DisplayContainer);","import React from 'react';\r\nimport './App.css';\r\nimport Keypad from './components/keypad'\r\nimport DisplayContainer from './components/display'\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n        <DisplayContainer />\r\n        <Keypad/>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import Decimal from 'decimal.js'\r\n\r\nconst OPERATIONS=['*', '/', '+', '-']\r\nconst opFunctions = {\r\n    '*':(a, b) => {return a.mul(b)},\r\n    '/':(a, b) => {return b!==0 ? a.div(b) : alert('no dividing by 0')},\r\n    '+':(a, b) => {return a.add(b)},\r\n    '-':(a, b) => {return a.sub(b)}\r\n}\r\n\r\nexport default function calculate(s){\r\n    //parse string into array of digits and operators\r\n    let calcArr=[];\r\n    let current = ''\r\n    let ops=OPERATIONS.join('')\r\n    for(let i = 0, char; i < s.length; i++){\r\n        char = s.charAt(i);\r\n        if (ops.indexOf(char) > -1){\r\n            if(current === '' && char === '-'){\r\n                current = '-'\r\n        } else if (current.endsWith('e')){\r\n            //handle scientific notation\r\n            current += char;\r\n        } else{ \r\n                calcArr.push(new Decimal(current), char)\r\n                current = '';\r\n            } \r\n        } else{\r\n            current = char === ' ' ? current : current += char\r\n        }\r\n    }\r\n    //push the final value and move on to reduction\r\n    if(current !== ''){\r\n        calcArr.push(new Decimal(current))\r\n    }\r\n\r\n    //iterate from front to back of operations (PEMDAS order)\r\n    let currentOp;\r\n    for(let i = 0; i < OPERATIONS.length; i++){\r\n        for(let j = 0; j < calcArr.length; j++){\r\n            if(calcArr[j] === OPERATIONS[i]){\r\n            //if the current operator is found, reduce the digits on either side and operator to single digit\r\n                currentOp = opFunctions[OPERATIONS[i]]\r\n                let insert = currentOp(calcArr[j-1], calcArr[j+1])\r\n                calcArr.splice(j-1, 3, insert)\r\n                j = j > 1 ? j - 2 : 0;\r\n            }\r\n        }\r\n    } \r\n    \r\n    //when array is down to a single value, return the value\r\n    return calcArr.length > 1 ? 'ERR' : Number(calcArr[0]);\r\n}","\r\nimport { initState, DIGIT, CLEAR, OPERAND, OP_END, EQUALS, BS } from './constants'\r\nimport calculate from './components/calculate.js'\r\nimport { toggleKey } from './actions';\r\n\r\nfunction calcReducer(state = initState, action){\r\n    switch(action.type){\r\n        case DIGIT: \r\n            let newNum = state.currNum;\r\n            if(newNum.length > 21){\r\n               return state;\r\n            }\r\n            let valid = false;\r\n            //evaluate 0 cases\r\n            if(action.num === '0'){\r\n                valid = newNum[0] !== '0' \r\n            }\r\n            //evaluate decimal cases\r\n            if(action.num === '.'){\r\n               if(newNum === ''){\r\n                   return Object.assign({}, state, {currNum:'0.', display:'0.'})\r\n               }else {\r\n                    valid = !state.currNum.includes('.')\r\n               }\r\n            }\r\n            //evaluate digits\r\n            if(action.num.match(/[1-9]/)){\r\n                //strip a leading zero on first digit entry\r\n                newNum = newNum === '0' ? '' : newNum\r\n                valid = true;\r\n            } \r\n            //if valid entry push newNum and update display\r\n            if(valid){\r\n                newNum = state.evaluated ? action.num : newNum + action.num\r\n                let newFormula = state.evaluated ? '' : state.formula\r\n                return Object.assign({}, state, {currNum: newNum, display: newNum, formula: newFormula, evaluated: false})\r\n            } else{\r\n                return state;\r\n            } \r\n            \r\n        case OPERAND:\r\n            let currNum = state.currNum;\r\n            let formula = (state.formula === '' && currNum === '') ? '0': state.formula;\r\n            if(state.evaluated === true){\r\n                formula = ''\r\n            }\r\n            if(action.op === '-' && currNum === ''){\r\n                return Object.assign({}, state, {currNum: '-', display: '-', evaluated: false})\r\n            }\r\n \r\n            if (currNum !== '' && currNum !== '-'){\r\n                formula = formula + currNum + ' ' + action.op + ' ';\r\n                return Object.assign({}, state, { formula: formula, currNum:'', display:'', evaluated: false})\r\n            } else {\r\n                let newFormula = formula.replace(OP_END, action.op + ' ')\r\n                return Object.assign({}, state, { formula: newFormula, currNum:'', evaluated: false })\r\n            } \r\n        case BS:\r\n            if(state.evaluated === true){\r\n                toggleKey('clear')\r\n                return initState;\r\n            }\r\n            if(state.currNum.length > 1){\r\n                let newNum = state.currNum.slice(0, -1) \r\n                return Object.assign({}, state, {currNum: newNum, display: newNum})\r\n            }\r\n            if(state.currNum.length === 1){\r\n                return Object.assign({}, state, {display:'', currNum:''})\r\n            }\r\n            if(state.formula.length > 0 && state.currNum.length === 0){\r\n                let newFormula = state.formula\r\n                if (newFormula.match(OP_END) || newFormula.endsWith(' ')){\r\n                   do{\r\n                        newFormula = newFormula.slice(0, -1)\r\n                    } while(newFormula.match(OP_END) || newFormula.endsWith(' '))\r\n                }else newFormula = state.formula.slice(0,-1)\r\n                return Object.assign({}, state, {formula: newFormula})\r\n            }else return state;\r\n\r\n        case CLEAR:\r\n            return Object.assign({}, state, {currNum:'', formula:'', display:'0', evaluated: false})\r\n\r\n        case EQUALS:\r\n            if(state.evaluated === true){\r\n                return state;\r\n            }\r\n            let evalFormula = state.formula + state.currNum;\r\n            //trim any trailing operators before eval (could move this to preparser in custom eval function later)\r\n            while (evalFormula.match(OP_END)){\r\n                evalFormula = evalFormula.slice(0, -1)\r\n            }            \r\n            let result = 0;\r\n            if(evalFormula.length > 0){\r\n                result = calculate(evalFormula)\r\n            }\r\n            if(result === 'ERR'){\r\n                setTimeout(()=>alert(\"ERROR - Could Not Calculate\"), 1500)\r\n                return state;\r\n            }\r\n            let resultDisplay = evalFormula + ' = ' + result.toString()\r\n            return Object.assign({}, state, {display: result, currNum: result.toString(), formula: resultDisplay, evaluated: true})\r\n        \r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default calcReducer\r\n\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { createStore } from 'redux'\r\nimport { Provider } from 'react-redux'\r\nimport calcReducer from './reducers'\r\n\r\nconst store = createStore(calcReducer)\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store = {store}>\r\n      <App />     \r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}